\h2{Document processing}

A COWEL document is processed from top to bottom,
left to right,
where each piece of content is fed into the current content policy.

There exists a \dfn{top-level content policy} which takes its input
and writes it to the output HTML file.

\h3[id=contexts-and-output]{Content policies}

A \dfn{content policy} dictates how each pice of content
(text, comments, escapes, directives)
is transformed into HTML or consumed in some other way.
For example, most content policies ignore comments,
process directives, etc.,
but other policies can process all these pieces of content into text.

Content policies are \dfn{piped},
meaning that the output of one policy is used as the input to another policy.
In a COWEL document, it is common to create long pipes of content policies.
These ultimately terminate in the top-level content policy
or in a policy which captures the output and writes it to memory for further processing.

The following builtin content policies exist:

\dl{
  \dt{To-HTML policy}
  \dd{
    Comments are ignored,
    escape sequences are expanded,
    text is sanitized and converted to "inner HTML" text for elements, and
    directives are processed as usual.
    Received HTML is taken literally,
    and received plaintext is sanitized like text.
  }

  \dt{Highlight policy}
  \dd{
    Like a to-HTML policy,
    but any text content and any received plaintext
    has syntax highlighting applied to it.
  }

  \dt{Paragraphs policy}
  \dd{
    Like a to-HTML policy,
    but surrounds given text content in paragraphs,
    and treats blank lines in text as paragraph separators.
    See \ref[#paragraph-splitting] for details.
  }

  \dt{No-invoke policy}
  \dd{
    Like a to-HTML policy,
    but directives are not processed.
    Instead, the source code of directives is taken, sanitized,
    and fed as HTML into the surrounding policy.
  }

  \dt{Actions policy}
  \dd{
    Ignores text, escape sequences, and comments,
    and passes any other content (e.g. directives)
    to the surrounding policy.
  }

  \dt{Text-only policy}
  \dd{
    Comments are ignored,
    escape sequences are expanded,
    text is taken literally, and
    directives are processed as usual.
    HTML content fed into this policy is ignored.
  }

  \dt{Text-as-HTML policy}
  \dd{
    Like a text-only policy,
    but instead of feeding its parent policy with the generated plaintext,
    all plaintext is reinterpreted as HTML before being fed into the parent policy.
  }

  \dt{Source-as-text policy}
  \dd{
    The source code of all processed content is interpreted as plaintext
    and fed into the surrounding policy.
    This includes comments.
  }
}

To \dfn{process directives as usual} means that when a directive is encountered,
a definition matching the directive name is looked up,
and the definition is invoked with the arguments and content of the directive.

The top-level content policy within a document is a
paragraph split content policy,
feeding content into an HTML content policy.

\h3{Directive processing}

The job of directives is to feed the current content policy with content.
Unlike text or escape sequences,
directives can do so programmatically.

\Bex{
In the COWEL snippet \cowdoc_c{\\b{x}},
the \cowdoc_dir{b} directive feeds the current content policy with
\ul{
  \li{an opening \cowdoc_html{<b>} tag,}
  \li{all content within \cowdoc_c{\\b{x}}, i.e. the text \cowdoc_c{x}, and}
  \li{a closing \cowdoc_html{</b>} tag.}
}

Content policies differ in how they treat the content they're fed:
\ul{
  \li{
    At a top level within the document,
    the opening \cowdoc_html{<b>} and closing \cowdoc_html{</b>}
    are simply written as HTML to the output file.
    The given text \cowdoc_c{x} is sanitized (i.e. characters like \tt{<} are escaped)
    and turned into inner HTML content.
    The result is simply \cowdoc_html{<b>x</b>}.
  }
  \li{
    When fed into a highlight policy,
    HTML tags are interpreted literally in the same way.
    However, syntax highlighting is applied to the given input text,
    resulting in \cowdoc_html{<b>\i{syntax highlighted x}</b>}.
  }
  \li{
    A literally content policy would not have processed \cowdoc_c{\\b{x}} in the first place,
    but taken its source code interpreted as text,
    and fed that into the surrounding policy.
  }
  \li{\N{HORIZONTAL ELLIPSIS}}
}
}

\h4{Lazy processing}

Unlike in typical programming languages,
where the input to a function is processed at the call site and the resulting values
are passed into the function,
COWEL directives have \em{absolute} control over their inputs and how they are processed.

Say you have a JavaScript function:
\codeblock[js]{
function f(x) {
    console.log(x);
}
f(2 + 2);
}
\code[js]{f} has no idea that its input was originally \code[js]{2 + 2}.
It only sees the value \code[js]{4} and prints it, "oblivious to the outside".

COWEL follows a different model:
\codeblock[cowel]{
\\comment{\\b{x}}
}
No \cowdoc_html{<b>} tag is ever generated because \cowdoc_c{\\b{x}} is never processed.
\cowdoc_dir{comment} is not magical feature;
it simply has control over all of its contents and arguments,
and it can choose not to process them.

You can even make a \cowdoc_dir{comment2} directive that works
just like \cowdoc_dir{comment} yourself:
\codeblock[cowel]{
\\macro[\\comment2]{}
}

