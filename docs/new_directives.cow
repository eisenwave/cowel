\h2{New directives}

Find below a list of builtin directives.
That is, directives that you can always use
because they are "built into the language".

\Bnote{
These builtin directives should rarely be used directly,
but through macro packages which utilize them.

Even if one wanted to use them,
builtin directive have long names which make them impractical for direct use in markup.
However, those long names are self-document, unambiguous,
and guaranteed not to collide with any user directives.
}

\h3{Common principles}

There are a few common principles,
which all builtin directives have in common:

\ul{
  \li{
    Unless otherwise stated,
    arguments to builtin directives are processed using the
    text-only policy (\ref[#contexts-and-output]).
  }
  \li{
    Unless otherwise stated,
    arguments to builtin directives
    use the usual argument matching (\ref[#usual-argument-matching]).
  }
  \li{
    Whenever content or arguments are said to be ignored,
    a warning is emitted when content or arguments are provided by the user, respectively.
  }
}

\h4{Usual argument matching}

The usual argument matching is performed as follows:

\ol{
  \li{
    Any parameters of the directive are compared against named arguments.
    If the name of the parameter is equal to the name of the named argument,
    the argument is a match for that parameter.
    An error is raised if there is more than one named argument with the same name.
  }
  \li{
    Any positional arguments are matched against any remaining parameters,
    in the same order.
  }
  \li{
    Any arguments that do not match a parameter are ignored.
  }
}

\Bex{
Let \cowdoc_dir{d} be a directive with parameters
\cowdoc_attr{x}, \cowdoc_attr{y}, and \cowdoc_attr{z}:
\codeblock[cowel]{\literally{
\: a, b, and c match x, y, and z, respectively
\d[z = c, y = b, x = a]

\: a, b, and c match x, y, and z, respectively
\d[a, b, c]

\: d matches x, a matches y, b matches z, c is ignored
\d[a, b, c, x = d]
}}
}


\h3[id=new-character-utilities]{Character utilities}

It is quite common that a text document should include special characters.
While COWEL is built on UTF-8 and in theory,
one could just write the character directly into the source code,
not every text editor handles special characters well,
not to mention that some characters are invisible when rendered.

For portability and convenience
COWEL has builtin directives for generating and querying characters.

\h4[
  id = dir-cowel_char_by_entity
]{\cowdoc_dir{cowel_char_by_entity} \c{mdash} Character by HTML character reference}

The \cowdoc_dir{cowel_char_by_entity} directive takes the name of a character
and outputs the respective code points as text.
The input to a \cowdoc_dir{c} directive is provided as content,
which consists of an HTML entity
without the leading '\tt{&}' and trailing '\tt{;}'.
All arguments are ignored.

\Bex{
The '\tt{&}' character can be produced in a number of ways:
\ul{
    \li{Literally '\tt{&}' in text}
    \li{\cowdoc_c{\\c{amp}} (like \cowdoc_html{&amp;}, named character reference)}
    \li{\cowdoc_c{\\c{#38}} (like \cowdoc_html{&38;}, decimal character reference)}
    \li{\cowdoc_c{\\c{#x26}} (like \cowdoc_html{&x26;}, hexadecimal character reference)}
}
}

\h4[
  id = dir-cowel_char_by_name
]{\cowdoc_dir{cowel_char_by_name} \c{mdash} Character by Unicode name}

The input to a \cowdoc_dir{cowel_char_by_num} directive is text content which should be a
\ref[https://www.unicode.org/reports/tr34/#Names]{Unicode name}
for a code point.
That is, the name of a code point,
or one of its "control", "alternate", or "correction" aliases.

\Bex{
\cowdoc_c{\\N{DIGIT ZERO}} generates '\tt{\N{DIGIT ZERO}}' U+0030 DIGIT ZERO.
}

\h4[
  id = dir-cowel_char_by_num
]{\cowdoc_dir{cowel_char_by_num} \c{mdash} Character by code point number}

The input to a \cowdoc_dir{cowel_char_by_num} directive is text content
which should be a sequence of hexadecimal numbers
specifying a \ref[https://infra.spec.whatwg.org/#scalar-value]{Unicode scalar value};
that is, a code point which UTF-8 permits to be encoded.
All arguments are ignored.

\Bex{
\cowdoc_c{\\U{30}} generates '\tt{\U{30}}' U+0030 DIGIT ZERO.
}

\Btip{
Use of \cowdoc_dir{cowel_char_by_name} can lead to much more descriptive,
human-friendly code, compared to \cowdoc_dir{cowel_char_by_num}.

The main issue with \cowdoc_dir{cowel_char_by_num} is
that it is very non-descriptive in source code.
It simply contains a handful of digits,
and unless the reader is a Unicode expert who happens to know that sequence,
they cannot easily tell what the purpose of the character is.
}

\h4[
  id=dir-cowel_char_get_num
]{\cowdoc_dir{cowel_char_get_num} \c{mdash} Get digits of character}

The \cowdoc_dir{cowel_char_get_num} directive is essentially the
inverse of the \cowdoc_dir{cowel_char_by_num} directive.
Its input is also plaintext content.
Rather than producing a code point from a digit sequence,
it produces a digit sequence from its input code point.

This can be fine-tuned with the following parameters:
\dd{
  \dt{\cowdoc_attr{zfill}}
  \dd{
    The minimum amount of digits that should be produced.
    This is an integer argument in range [0, 1024], and defaults to zero.
    If the amount of digits is less than \cowdoc_attr{zfill},
    it will be left-padded with additional '\tt{0}' characters.
  }

  \dt{\cowdoc_attr{base}}
  \dd{
    The base of the output digit sequence, in range [2, 16].
    This defaults to 16, meaning that the digits are printed in hexadecimal.
  }

  \dt{\cowdoc_attr{lower}}
  \dd{
    A yes/no plaintext argument, defaulting to \tt{no}.
    If \tt{yes} is specified, digits beyond '\tt{9}' (i.e. '\tt{A}' to '\tt{F}')
    will be output in lower case instead.
}
}

\Bex{
COWEL markup:
\codeblock[cowel]{\literally{
U+\cowel_char_get_num[4]{x}
}}
This renders as:
\Bindent{
U+\cowel_char_get_num[4]{x}
}
Note that U+0078 is the usual way in which Unicode code points are represented.
That is, \tt{U+}, followed by at least four hexadecimal digits.
It is also possible to define a macro if we need this frequently:
\codeblock[cowel]{\literally{
\macro[\code_point]{U+\cowel_char_get_num{\put}}
\code_point{x}
}}
}

\Btip{
\cowdoc_dir{cowel_char_get_num} can also be combined with \cowdoc_dir{cowel_char_by_name}
to produce human-readable descriptions of code points,
while also keeping our source code readable:
\codeblock[cowel]{\literally{
\macro[\named_char{...}]{U+\cowel_char_get_num[4]{\N{\put}} \put}
\named_char{SECTION SIGN}
}}
This renders as:
\Bindent{
U+\cowel_char_get_num[4]{\N{SECTION SIGN}} SECTION SIGN
}
}

\cowdoc_dir{cowel_char_get_num} uses only the first code point within the input text,
even though the entire input text is processed into plaintext.

\Bug{
If we provide more than a single code point, some input is discarded:
\codeblock[cowel]{
\\cowel_char_get_num{abc}
}
This renders as
\Bindent{
\cowel_char_get_num{a}
}
... which corresponds to \cowdoc_c{a}, whereas \cowdoc_c{b} and \cowdoc_c{c} are discarded.
}

\h3{HTML utilities}

\h4[
  id=dir-cowel_html_element
]{\cowdoc_dir{cowel_html_element} \c{mdash} HTML element}

The \cowdoc_dir{cowel_html_element} directive generates content,
surrounded in HTML opening and closing HTML tags.
That is, it

\ul{
  \li{
    writes an opening tag,
    where any named arguments are converted to HTML attributes,
  }
  \li{
    feeds the provided content into the current content policy, and then
  }
  \li{
    writes a closing tag.
  }
}

The name of the HTML tag is provided
as the first positional argument to the directive.

\Bex{
COWEL markup:
\codeblock[cowel]{\literally{
This is \cowel_html_element[span, id=abc]{a span}.
}}
Generated HTML:
\codeblock[html]{
This is <span id=abc>a span</span>.
}
}

A \cowdoc_dir{cowel_html_element} directive produces an error if the given
tag name is not a valid HTML tag name, or
if any of the argument names are invalid.

\h4[
  id=dir-cowel_html_self_closing_element
]{\cowdoc_dir{cowel_html_self_closing_element} \c{mdash} Self-closing HTML element}

The \cowdoc_dir{cowel_html_self_closing_element} directive generates a self-closing HTML element.
That is, an element with no content,
and where there is no closing tag.
Content is ignored.

The name of the tag is provided as the first positional argument,
and any named arguments are converted to attributes of the tag.

\Bex{
COWEL markup:
\codeblock[cowel]{\literally{
Horizontal rule:
\cowel_html_self_closing_element[hr, id=abc]{ignored}
}}
Generated HTML:
\codeblock[html]{
Horizontal rule:
<hr id=abc />
}
}

\h3[id=new-content-policies]{Content policies}

As explained in \ref[#contexts-and-output],
all content within the document and produced by directives is fed into a content policy,
which, in turn, feeds content into some parent content policy.

The table below lists directives which process content using some content policy.

\Bindent{
\table{
  \tr{
    \th{Directive}
    \th{Content policy}
    \th{Notes}
  }
  \tr{
    \td{\cowdoc_dir{cowel_to_html}}
    \td{HTML policy}
    \td{}
  }
  \tr{
    \td{\cowdoc_dir{cowel_highlight}}
    \td{highlight policy}
    \td{see \ref[#dir-cowel_highlight]}
  }
  \tr{
    \td{\cowdoc_dir{cowel_paragraphs}}
    \td{paragraphs policy}
    \td{see \ref[#dir-cowel_paragraphs]}
  }
  \tr{
    \td{\cowdoc_dir{cowel_no_invoke}}
    \td{no-invoke policy}
    \td{}
  }
  \tr{
    \td{\cowdoc_dir{cowel_text_only}}
    \td{text-only policy}
  }
  \tr{
    \td{\cowdoc_dir{cowel_text_as_html}}
    \td{text-as-html policy}
  }
  \tr{
    \td{\cowdoc_dir{cowel_source_as_text}}
    \td{source-as-text policy}
  }
}
}

\h4[
  id = dir-cowel_to_html
]{\cowdoc_dir{cowel_to_html} \c{mdash} Process with to-HTML policy}

\cowdoc_dir{cowel_to_html} simply processes the provided content using the to-HTML policy.
All arguments are ignored.

The purpose of this policy/directive is mainly to
feed its parent policy pure HTML content,
rather than a mixture of plaintext and HTML.
This also suppresses paragraph splitting, syntax highlighting,
and other such "special treatments" of plaintext,
since none of those operate on HTML.

\Bex{
Since HTML is not syntax-highlighted,
we can insert special characters like U+00AD SOFT HYPHEN
into code snippets, without interfering with syntax highlighting:
\codeblock[cowel]{\literally{
Use of
\cowel_html_element[code]{
\cowel_highlight[cpp]{reinterpret_\
\cowel_to_html{\cowel_char_by_name{SOFT HYPHEN}}\
cast}
}
is discouraged.
}}

This renders as:
\Bindent{
Use of
\code[cpp]{reinterpret_cast} is discouraged.
}
Or, if line wrapping takes place in the middle of the highlighted keyword,
it renders as:
\Bindent{
Use of
\tt{\cowel_highlight_as[keyword]{reinterpret_}-\br{}
\cowel_highlight_as[keyword]{cast}} is discouraged.
}
}

\h4[
  id = dir-cowel_no_invoke
]{\cowdoc_dir{cowel_no_invoke} \c{mdash} Process with no-invoke policy}

\cowdoc_dir{cowel_no_invoke} processes the provided content
using the no-invoke policy.
All arguments are ignored.

\Bex{
COWEL markup:
\codeblock[cowel]{\literally{
\cowel_no_invoke{Undefined directive: \awoo}
}}
Generated HTML:
\codeblock[html]{
Undefined directive: \\awoo
}
Under the no-invoke policy selected by \cowdoc_c{no_invoke},
\cowdoc_c{\\awoo} is not invoked,
but its source code is fed into the current policy as plaintext.
This is particularly useful when writing code blocks
which contain character escapes (e.g. containing \code[cpp]{"\\n"} in C++)
because such escapes should not treated as COWEL directives.
}

\Bnote{
COWEL comments and COWEL escape sequences are processed as usual.
That is, comments are ignored, and escapes are expanded.
}

\h4[
  id = dir-cowel_text_only
]{\cowdoc_dir{cowel_text_only} \c{mdash} Process with text-only policy}

\cowdoc_dir{cowel_text_only} processes the provided content
using the text-only policy.
All arguments are ignored.

\Bex{
COWEL markup:
\codeblock[cowel]{\literally{
Hello, \cowel_html_element[strong]{strong} world!
\cowel_text_only{Hello, \cowel_html_element[strong]{strong} world!}
}}
Generated HTML:
\codeblock[html]{
Hello, <strong>strong</strong> world!
Hello, strong world!
}
As can be seen, only plaintext "makes it through",
whereas HTML is stripped.
}

\Bnote{
This policy is used internally when processing arguments in various places,
such as in the \cowdoc_c{strong} positional argument to
\cowdoc_dir{cowel_html_element} in the example above.

It is mainly useful in situations where it makes no sense to have non-plaintext content.
}

\h4[
  id = dir-cowel_text_as_html
]{\cowdoc_dir{cowel_text_as_html} \c{mdash} Process with text-as-HTML policy}

\cowdoc_dir{cowel_no_invoke} processes the provided content
using the text-as-HTML policy.
All arguments are ignored.

\Bex{
COWEL markup:
\codeblock[cowel]{\literally{
\cowel_text_as_html{Hello, <strong>strong</strong> world!}
}}
Generated HTML:
\codeblock[html]{
Hello, <strong>strong</strong> world!
}
As can be seen, the provided text is reinterpreted as HTML.
}

\Bwarn{
This directive should be used with great caution
because it can easily result in producing malformed HTML.
While there are legitimate uses (e.g. inline SVG images and other large HTML blocks),
\cowdoc_dir{cowel_html_element} and other safer directives should be preferred.
}

\h4[
  id = dir-cowel_source_as_text
]{\cowdoc_dir{cowel_source_as_text} \c{mdash} Process with source-as-text policy}

\cowdoc_dir{cowel_no_invoke} processes the provided content
using the source-as-text policy.
All arguments are ignored.

\Bex{
COWEL markup:
\codeblock[cowel]{\literally{
\cowel_source_as_text{
\: Comment ...
Hello \source_as_text \{ ... \}
}
}}
Generated HTML:
\codeblock[html]{\literally{
\: Comment ...
Hello \source_as_text \{ ... \}
}}
}

\Bnote{
This directive is mainly useful for writing COWEL code blocks,
where all content within is treated literally, including comments.

It can be seen as a more extreme form of \cowdoc_dir{cowel_no_invoke},
and is more niche in its applications.
}

\h3[id=new-syntax-highlighting]{Syntax highlighting}

Syntax highlighting improves the readability of inline code and code snippets
by applying different formatting (usually colors)
based on the syntactical meaning of text.
Many examples can be found in this document.

\h4[
  id = dir-cowel_highlight
]{\cowdoc_dir{cowel_highlight} \c{mdash} Perform syntax highlighting}

The \cowdoc_dir{cowel_highlight}
processes content using the highlight policy,
which wraps parts of code in HTML tags for the purpose of syntax highlighting.

\cowdoc_dir{cowel_highlight} has a single \cowdoc_attr{lang} parameter.
This specifies the name of language (e.g. \tt{cowel})
in which the content is to be highlighted.
The name has to be one of the language short names
supported by the \ref[https://github.com/Eisenwave/ulight]{µlight syntax highlighter},
which is the highlighter that COWEL uses internally.

\h4[
  id = dir-cowel_highlight_as
]{\cowdoc_dir{cowel_highlight_as} \c{mdash} Syntax highlight override}

The \cowdoc_dir{cowel_highlight_as} directive forces certain syntax highlighting
to be applied to some text;
it is a manual override for when automatic syntax highlighting is insufficient or broken.
This is done by wrapping the given content in HTML tags for syntax highlighting
and feeding the provided content, converted to HTML into the surrounding policy,
so it is not subject to automatic highlighting.

\cowdoc_dir{cowel_highlight_as} has a single \cowdoc_attr{name} parameter,
which is the µlight \dfn{long name} for a highlight type.

\Btip{
You can obtain a list of possible long names at
\ref[https://github.com/Eisenwave/ulight/blob/main/include/ulight/ulight.h]{\tt{ulight.h}}
from the definition of \code[cpp]{enum ulight_highlight_type}.
The long name is the enumerator name without the \tt{ULIGHT_HL} prefix,
all lowercase, and with hyphens instead of underscores.
}

\Bex{
It is possible to mix automatic syntax highlighting with manual overrides:
\codeblock[cowel]{\literally{
\: _Int128 is manually highlighted as a type keyword,
\: and x is automatically highlighted as an identifier.
\cowel_html_element[code]{\
\cowel_highlight[c]{\cowel_highlight_as[keyword-type]{_Int128} x}\
}
}}
This generates the HTML (subject to change):
\codeblock[html]{
<code><h- data-h=kw_type>_Int128</h-> <h- data-h=id>x</h-></code>
}
It renders as \code[c]{\cowel_highlight_as[keyword-type]{_Int128} x}.
}

\Bnote{
While it is also possible to produce the highlighting tags using
\cowdoc_c{\\cowel_html_element[h-,data-h=kw_type]{_Int128}},
the "short names" (e.g. \cowdoc_c{kw_type}) are not stable,
i.e. they are more likely to change.
Only µlight long names should be used directly.
}

\h4[
  id = dir-cowel_highlight_phantom
]{\cowdoc_dir{cowel_highlight_phantom} \c{mdash} Syntax highlight phantom text}

The \cowdoc_dir{cowel_highlight_phantom} directive
can be used to further customize syntax highlighting.
It outputs \dfn{phantom text}, which is fed into the syntax highlighter,
but is not part of the output content.

The provided content is processed using a text-only policy (\ref[#contexts-and-output]).
If the current policy is a highlight policy,
the text output by the former is turned into phantom text within the latter.
Otherwise, the generated text is discarded.
All arguments are ignored.

\Bex{
Using \cowdoc_dir{cowel_highlight_phantom},
we can control whether a JSON string is interpreted as a markup key,
or as a string value:
\codeblock[cowel]{\literally{
In JSON, there are
\cowel_html_element[code]{\cowel_highlight[json]{\cowel_highlight_phantom{\{}"keys"}}
and
\cowel_html_element[code]{\cowel_highlight[json]{"values"}}.
\: Note that this is low-level functionality intended to power macros like:
\:   \code[json,prefix=\{]{"keys"}
\: or
\:   \json_key{"keys"}
}}
Using the highlight theme of this document, this renders as:
\Bindent{
In JSON, there are \code[json,prefix=\{]{"keys"} and \code[json]{"values"}.
}
Notice that the color of \code[json,prefix=\{]{"keys"} is different because it is highlighted
as if it was positioned like:
\codeblock[json]{
\{"keys"
}
\:}}
}

\h3[id=new-paragraph-control]{Paragraph control}

Dividing content into paragraphs manually would take a huge amount of effort,
so COWEL provides means of doing so semi-automatically.
Text within in a paragraphs policy (\ref[#contexts-and-output])
is automatically wrapped in paragraphs (\cowdoc_html{<p>...</p>}),
divided at blank lines.

While content expanded from macros and from \cowdoc_dir{cowel_include}
is fed into the surrounding content policy
(which may be a paragraphs policy) directly,
directives are generally treated as "black boxes"
for the purpose of paragraph splitting,
and they neither begin nor end a paragraph.
The following paragraph control directives define interactions
between paragraph splitting and directives.

\h4[
  id = dir-cowel_paragraphs
]{\cowdoc_dir{cowel_paragraphs} \c{mdash} Perform paragraph splitting}

The \cowdoc_dir{cowel_paragraphs} directive
creates a paragraphs policy (\ref[#contexts-and-output])
and feeds all provided content into that policy.
The beginning and end of the provided content are considered to be outside a paragraph.
All arguments are ignored.

\Bex{
COWEL markup:
\codeblock[cowel]{\literally{
\cowel_paragraphs{
First paragraph.

Second paragraph.
}
}}

Generated HTML:
\codeblock[html]{
<p>First paragraph.</p>

<p>Second paragraph.</p>
}
}

\Bnote{
At a top-level within the document,
paragraph splitting takes place implicitly,
as if the whole document was wrapped in \cowdoc_dir{cowel_paragraphs}.

However, this does not extend recursively,
so if one wants to have paragraph splitting inside say,
\cowdoc_dir{cowel_html_\c{shy}element},
\cowdoc_dir{cowel_paragraphs} has to be used.
}

\h4[
  id = dir-cowel_paragraph_enter
]{\cowdoc_dir{cowel_paragraph_enter} \c{mdash} Enter a paragraph}

If the current content policy is a paragraphs policy and
and the paragraph state is "outside",
the paragraph state becomes "inside",
and a \cowdoc_html{<p>} tag is emitted.
Otherwise, has no effect.
All arguments are ignored.

\Bex{
COWEL markup, assuming a surrounding paragraphs policy:
\codeblock[cowel]{\literally{
\cowel_char_by_name{DIGIT ONE}. First paragraph

\cowel_paragraph_enter\cowel_char_by_name{DIGIT TWO}. Second paragraph
}}

Generated HTML:
\codeblock[html]{
1<p>. First paragraph</p>

<p>2. Second paragraph</p>
}

As explained, directives are "black boxes" for paragraph splitting,
so when the paragraphs policy processes \cowdoc_dir{cowel_char_by_name},
it does not automatically begin a paragraph.
}

\Btip{
\cowdoc_dir{cowel_paragraph_enter} should rarely be used directly,
but from within macros.

For example, the user can define an \cowdoc_dir{N} directive which combines
\cowdoc_dir{cowel_para\c{shy}graph_enter} and \cowdoc_dir{cowel_\c{shy}char_by_name}.
}

\h4[
  id = dir-cowel_paragraph_leave
]{\cowdoc_dir{cowel_paragraph_leave} \c{mdash} Leave a paragraph}

If the current content policy is a paragraphs policy and
and the paragraph state is "inside",
the paragraph state becomes "outside",
and a closing \cowdoc_html{</p>} tag is emitted.
Otherwise, has no effect.
All arguments are ignored.

\Bex{
COWEL markup, assuming a surrounding paragraphs policy:
\codeblock[cowel]{\literally{
Paragraph 1:
\cowel_html_self_closing_element[hr]

Paragraph 2:
\cowel_paragraph_leave\cowel_html_self_closing_element[hr]
}}

Generated HTML:
\codeblock[html]{
<p>Paragraph 1:
<hr/></p>

<p>Paragraph 2:
</p><hr/>
}

As explained, directives are "black boxes" for paragraph splitting,
so when the paragraphs policy processes \cowdoc_dir{cowel_html_self_closing_element},
it does not automatically leave a paragraph.
This would be necessary because horizontal rules (\cowdoc_html{<hr/>})
are not supposed to be inside a paragraph.
}

\Btip{
\cowdoc_dir{cowel_paragraph_leave} should rarely be used directly,
but from within macros.

For example, the user can define a \cowdoc_dir{hr} directive which combines
\cowdoc_dir{cowel_para\c{shy}graph_leave} and
\cowdoc_dir{cowel_\c{shy}html_self_closing_element}.
}

\h4[
  id = dir-cowel_paragraph_inherit
]{\cowdoc_dir{cowel_paragraph_inherit} \c{mdash} Activate paragraph splitting inside a directive}

\Bimp{
There is no support for programmatic directives yet,
so this directive is currently useless.
There are plans to add a WASM scripting API from which
\cowdoc_dir{cowel_paragraph_inherit} may be used to alter behavior.
}

As already stated,
paragraph splitting generally treats directives as "black boxes".
However, content expanded from \cowdoc_dir{cowel_include} and macros
\dfn{inherits} the surrounding paragraph for splitting,
i.e. any content produced by such directives is fed directly into the paragraphs policy.
\cowdoc_dir{cowel_paragraph_inherit} can be used inside programmatic directives
defined by the user to achieve the same behavior.

\h3[id=new-file-management]{File management}

Once projects get larger,
it often becomes difficult to manage everything in a single file.
Also, tooling may benefit from having separate files.
For example, keeping separate SVG files
or CSS files may have better IDE support than writing these out directly inside of COWEL.

COWEL provides directives to load content from other files.

\h4[
  id = dir-cowel_include
]{\cowdoc_dir{cowel_include} \c{mdash} Include a sub-document}

The \cowdoc_dir{cowel_include} directive loads the content from another COWEL document,
and processes it using the current content policy.
The path to the document is provided as content to \cowdoc_dir{cowel_include},
and is assumed to be relative to the current file.
All arguments are ignored.

If the current content policy is a paragraphs policy (\ref[#contexts-and-output]),
paragraph splitting of the included sub-document takes place
as if its contents were expanded directly where \cowdoc_dir{cowel_include} appears.
In other words, \cowdoc_dir{cowel_include} inherits the paragraph context,
or is \em{not} a "black box" to paragraph splitting.

\Bex{
Say we have another \tt{test.cow} files containing:
\codeblock[cowel]{\literally{
Hello, includes!

Next paragraph.
}}
When using \cowdoc_dir{cowel_include},
the contents of the other file are substituted where we have written \cowdoc_dir{cowel_include},
which means that imported content also plays nicely with paragraph splitting:
\codeblock[cowel]{\literally{
First paragraph.
\cowel_include{test.cow}
}}
Generated HTML:
\codeblock[html]{
<p>First paragraph.
Hello, includes!</p>

<p>Next paragraph.</p>
}
}

\Btip{
It is common practice to collect macros and other reusable components in separate documents,
and to \cowdoc_dir{cowel_include} them when needed.
This can help you avoid copying boilerplate between multiple documents.

It is also common to split documents into multiple files that are combined using a sequence
of \cowdoc_dir{cowel_include}s.
}

\h4[
  id = dir-cowel_include_text
]{\cowdoc_dir{cowel_include_text} \c{mdash} Include text from a file}

The \cowdoc_dir{cowel_include_text} directive reads the UTF-8 text contents of another file
and feeds that text into the current content policy.
The path to the document is provided as content to \cowdoc_dir{cowel_include_text},
and is assumed to be relative to the current file.
All arguments are ignored.

\Bex{
Say we have a JavaScript file \tt{example.js} which we want to keep separate from the document.
We can then include it into a \cowdoc_dir{script} block to use it as a script,
or we can include it into a \cowdoc_dir{codeblock} to display its contents.
\codeblock[cowel]{\literally{
\codeblock[js]{
// code included from example.js:
\cowel_include_text{example.js}
}
}}
Assuming that \tt{example.js} is located in the same directory as the document
and that loading the file succeeds,
this renders as: 
\codeblock[js]{
// code included from example.js:
\cowel_include_text{example.js}
}
}

\Bnote{
While \cowdoc_dir{cowel_include} and \cowdoc_dir{cowel_include_text} are similar,
there are some stark differences:
\ul{
  \li{
    \cowdoc_dir{cowel_include} is used for COWEL documents,
    while \cowdoc_dir{cowel_include_text} is used for anything else.
  }
  \li{
    \cowdoc_dir{cowel_include} doesn't just load the text from another file,
    but parses it and ensures that the contents are a valid COWEL document.
  }
  \li{
    \cowdoc_dir{cowel_include} feeds content from another document
    piece by pice into the current content policy.
    \cowdoc_dir{cowel_include_text} reads text
    and feeds it all in a single block to the content policy.
  }
}
}

\h3[id=new-aliases]{Aliases}

\h4[
  id = dir-cowel_alias
]{\cowdoc_dir{cowel_alias} \c{mdash} Define aliases for an existing directive}

The \cowdoc_dir{cowel_alias} directive defines one or more aliases for an existing directive.
The content of \cowdoc_dir{cowel_alias} is converted to text,
and must be the name of an existing directive or directive alias.
Each positional argument is converted to text,
and results in the definition of a new directive alias.
After processing \cowdoc_dir{cowel_alias},
the target can also be invoked using the alias name.
Named arguments are ignored.

A fatal error is raised if
\ul{
  \li{generation of the alias or target names is erroneous,}
  \li{the target name or any of the alias names are empty,}
  \li{the target name or any of the alias names are not valid directive names,}
  \li{the target was not found, or}
  \li{an alias name matches the name of an existing macro or alias.}
}

\Bex{
One or multiple aliases can be defined as follows:
\codeblock[cowel]{\literally{
\cowel_alias[N]{cowel_char_by_name}
\N{DIGIT ZERO}              \: OK, equivalent to \cowel_char_by_name{DIGIT ZERO}

\cowel_alias[incl, include]{cowel_include}
\incl{file.cow}             \: OK, equivalent to \cowel_include{file.cow}
\include{file.cow}          \: OK, same

\cowel_alias{cowel_to_html} \: OK, but no effect

\cowel_alias{\N{???}}        \: error: generation of target name failed
\cowel_alias{??}             \: error: invalid target name
\cowel_alias{undefined}      \: error: target not found
\cowel_alias[?]{cowel_alias} \: error: invalid alias name
\cowel_alias[N]{N}           \: error: redefinition of N
}}
}

\h3[id=new-invocations]{Invocations}

\h4[
  id = dir-cowel_invoke
]{\cowdoc_dir{cowel_invoke} \c{mdash} Invoke a directive}

The \cowdoc_dir{cowel_invoke} directive invokes a directive by name.
This process is called a \dfn{dynamic invocation}.
Most invocations are \dfn{static invocations}.

The name of the invoked directive is provided as the first positional argument.
All other arguments are ignored.
The content provided to \cowdoc_dir{cowel_invoke}
is the content provided to the invoked directive.

\Bex{
Any directive \cowdoc_dir{abc} can be invoked statically or dynamically:
\codeblock[cowel]{\cowel_invoke[literally]{
\: Static invocation of directive named "abc".
\abc{...}
\: Static invocation of directive named "cowel_invoke",
\: which performs an equivalent dynamic invocation of "abc".
\cowel_invoke[abc]{...}
}}
}

\Btodo{
It is also planned to allow providing arguments to the invoked directive,
but it may be better to add "argument groups" to the syntax first,
so that they can be bundled up in an \cowdoc_attr{args} group.
To avoid changing how \cowdoc_dir{cowel_invoke} works in the future,
argument forwarding is not supported at all right now.
}
